.home-index-container {
  background-color: #fff;
  .carousel-wrap {
    height: 212px;
  }

  :global(.am-flexbox-item) {
    padding: 10px 0;
    text-align: center;
    img {
      width: 48px;
      height: 48px;
    }
  }

  .group-wrap {
    background-color: #f6f6f6;
    .group-title {
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding: 10px 20px;
      h2 {
        font-weight: 600;
        font-size: 16px;
      }
    }

    :global(.am-grid) {
      padding: 0 10px;
      :global(.am-flexbox) {
        background-color: inherit;
        padding-bottom: 10px;
        :global(.am-flexbox-item.am-grid-item) {
          background-color: #fff;
          height: 80px;
          margin: 0px;
          &:first-child {
            margin-right: 10px;
          }
        }
      }
    }

    .group-item {
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding: 0 10px;
      .content {
        display: flex;
        flex-direction: column;
      }
      .title {
        font-weight: 600;
        font-size: 14px;
      }
      .desc {
        color: #ccc;
        padding-top: 10px;
      }
    }
  }
}






// 1、css-modules方案解决样式冲突：
// A、带':global()'的是通用样式或者组件额外生成的样式，使用时直接写字符串类名即可 className='carouse-wrap'
// B、不带':global()'的是有作用域的类样式，使用时应该以 css-modules文件导出对象点出类名方式使用 className={ 导出变量名.['home-index-container'] }
// 2、对于库组件衍生出来的样式，如果是采用css-modules方案，则必须使用:global()对其进行控制，否则无法选取该衍生样式